# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/21_experiment-configs.ipynb (unless otherwise specified).

__all__ = ['ConfigBase', 'SyntheticConfig']

# Cell
from fastcore.all import *
from fastai.basics import *

from .all import *

# Cell
class ConfigBase:
    "Base class for Configs"
    _d:dict = None
    _model:Module = None

    def validate(self):
        assert exists(self._d), "_d missing. You might want to provide defaults for config"
        assert exists(self._model), "_model missing. Provide a model class"

    def __repr__(self):
        s = f"{self._model.__name__} config \n" + '-'*20
        s += ''.join(f'\n{k:16}{v}' for k,v in self._d.items())
        return s

    def dict(self): return self._d

    def save(self, fn, add_tstmp=False):
        if add_tstmp:
            tstmp = time.strftime("_%d_%m_%Y_%H:%M", time.gmtime())
            fn += tstmp
        save_pickle(fn, self)

    @classmethod
    def from_file(cls, fn):
        return load_pickle(fn)

# Cell
class SyntheticConfig(ConfigBase):
    """
    Config for Synthetic Experiment.
    See https://arampacha.github.io/reformer_fastai/experiment.synthetic-task.html for details
    """
    _model = LSHLM
    _d = {
        'vocab_sz':128,
        'd_model':256,
        'n_layers':1,
        'n_heads':4,
        'd_ff':256,
        'attn_dropout':0.0,
        'ff_dropout':0.0,
        'emb_dropout':0.0,
        'tie_weights':True,
        'causal':True,
        'pos_enc':'absolute',
        'max_seq_len':1024,
        'axial_shape':None,
        'axial_emb_dims':None,
        'pad_idx':None,
        'prenorm':False,
        'attn_bias':False,
        'bucket_size':64,
        'use_lsh':True,
        'n_hashes':4,
        'random_state':123,
    }

    @delegates(_model)
    def __init__(self, **kwargs):
        self.validate()
        for k,v in kwargs.items():
            if k in self._d: self._d[k]=v
            else: print(f'Parameter {k} is not accepted by LSHLM. Skipped')
